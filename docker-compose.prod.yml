# docker-compose.prod.yml - Production configuration
# Run with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # Database Service - Production configuration
  db:
    container_name: myapp-db-prod
    restart: always
    environment:
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Server Service - Production build
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: myapp-server:production
    container_name: myapp-server-prod
    restart: always
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=info
      - DB_MAX_IDLE_CONNECTIONS=10
      - DB_MAX_OPEN_CONNECTIONS=50
      - DB_CONNECTION_MAX_LIFETIME=5m
      - SERVER_TIMEOUT=30s
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGIN=${CLIENT_URL:-http://localhost:3000}
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          memory: 256M

  # Client Service - Production build
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: myapp-client:production
    container_name: myapp-client-prod
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 512M

volumes:
  postgres_data:
    driver: local
