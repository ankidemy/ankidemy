# docker-compose.dev.yml - Development overrides
# This file is used with docker-compose.yml using: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Database Service - Development overrides
  db:
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-scripts:/docker-entrypoint-initdb.d
    command: postgres -c log_statement=all -c shared_buffers=256MB -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s

  # Server Service - Development overrides
  server:
    # Use the golang image directly for development to ensure we have all development tools
    image: golang:1.21-alpine
    working_dir: /app
    volumes:
      - ./server:/app:cached
      - server_go_mod_cache:/go/pkg/mod
      - server_go_build_cache:/root/.cache/go-build
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    environment:
      - APP_ENV=development
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - CORS_ALLOWED_ORIGIN=${CLIENT_URL:-http://localhost:3000}
      - CORS_ENABLED=true
    # Use Alpine's shell to run Go directly
    command: sh -c "cd /app && go mod tidy && go run -gcflags='all=-N -l' ."
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${SERVER_PORT:-8080}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Client Service - Development overrides
  client:
    build:
      target: development
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes:
      # Mount source code but exclude node_modules and .next
      - ./client:/app:cached
      - client_node_modules:/app/node_modules
      - client_next_cache:/app/.next
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:${SERVER_PORT:-8080}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - NEXT_TELEMETRY_DISABLED=1
    # Run as root to fix permissions, then switch to node user
    user: root
    command: >
      sh -c "
        echo 'Setting up Next.js development environment...' &&
        mkdir -p /app/.next &&
        chown -R node:node /app/node_modules /app/.next &&
        echo 'Creating JavaScript config from TypeScript config...' &&
        if [ -f next.config.ts ]; then
          echo 'module.exports = require(\"./next.config\");' > next.config.js
          chown node:node /app/next.config.js
        fi &&
        echo 'Installing TypeScript dependencies...' &&
        npm install --save-exact --save-dev typescript @types/react @types/node &&
        echo 'Starting Next.js development server...' &&
        su - node -c 'cd /app && npm run dev'
      "

  # Nginx - Development overrides
  nginx:
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      # Make sure the file exists and mount it properly
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

# Additional volumes for development
volumes:
  server_go_mod_cache:
  server_go_build_cache:
  client_node_modules:
  client_next_cache:
