# docker-compose.dev.yml - Development overrides
# Run with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Database Service - Development configuration
  db:
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-scripts:/docker-entrypoint-initdb.d
      # Mount a development-specific postgresql.conf if needed
      - ./db/dev-config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      # Add development-specific environment variables
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Server Service - Development with simple build approach
  server:
    image: golang:1.21-alpine
    working_dir: /app
    volumes:
      - ./server:/app:cached
      - server_go_mod_cache:/go/pkg/mod
      - server_go_build_cache:/root/.cache/go-build
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
      # Expose debugger port
      - "2345:2345"
    environment:
      - APP_ENV=development
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - CORS_ALLOWED_ORIGIN=${CLIENT_URL:-http://localhost:3000}
      - CORS_ENABLED=true
    # Simple recompile and run approach
    command: >
      sh -c "
        echo 'Setting up Go development environment...' &&
        apk add --no-cache git &&
        cd /app &&
        go mod download &&
        go build -o ./tmp/main . &&
        ./tmp/main
      "
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:${SERVER_PORT:-8080}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Client Service - Development with hot reload
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    image: myapp-client-dev:latest
    volumes:
      # Mount source code with exclusions
      - ./client:/app:delegated
      - /app/node_modules
      - /app/.next
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:${SERVER_PORT:-8080}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - NEXT_TELEMETRY_DISABLED=1
      # Add useful development variables
      - NEXT_WEBPACK_USEPOLLING=1
      - WATCHPACK_POLLING=${WATCHPACK_POLLING:-true}
    # Run the dev command directly
    command: npm run dev
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Development utility services
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "${PGADMIN_PORT:-5050}:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - app-network
    restart: unless-stopped

volumes:
  server_go_mod_cache:
  server_go_build_cache:
  pgadmin_data:
  postgres_data:
