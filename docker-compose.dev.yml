# docker-compose.dev.yml - Development overrides
# Run with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Database Service - Development configuration
  db:
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - ./db/init-scripts:/docker-entrypoint-initdb.d
      - ./db/dev-config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      - PGDATA=/var/lib/postgresql/data
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Server Service - Development with hot reload and optimized startup
  server:
    working_dir: /app
    volumes:
      - ./server:/app:cached
      - server_go_mod_cache:/go/pkg/mod
      - server_go_build_cache:/root/.cache/go-build
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
      - "2345:2345" # Debugger port
    environment:
      - APP_ENV=development
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      - GOGC=off                      # Disable GC during development for faster builds
      - GOFLAGS=-mod=readonly         # Don't update go.mod during development
    command: >
      sh -c "
        if [ ! -f /tmp/.go_deps_installed ]; then
          echo 'Setting up Go development environment...' &&
          apk add --no-cache git &&
          cd /app &&
          go mod download &&
          touch /tmp/.go_deps_installed;
        fi &&
        cd /app &&
        go build -o ./tmp/main . &&
        ./tmp/main
      "
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:${SERVER_PORT:-8080}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Client Service - Development with hot reload and optimized startup
  client:
    working_dir: /app
    volumes:
      - ./client:/app:delegated
      - client_node_modules:/app/node_modules
      - client_next_cache:/app/.next
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_WEBPACK_USEPOLLING=1
      - WATCHPACK_POLLING=${WATCHPACK_POLLING:-true}
      # Optimize Next.js development experience
      - NEXT_TURBO=${NEXT_TURBO:-true}           # Use Turbopack for faster development builds
      - TURBOPACK=true
      - NEXT_OPTIMIZE_FONTS=false                # Skip font optimization in dev
      - NEXT_OPTIMIZE_IMAGES=false               # Skip image optimization in dev
      - NEXT_DISABLE_SOURCEMAPS=true             # Disable source maps in dev
    command: sh -c "[ ! -d node_modules ] && npm install || echo 'Dependencies already installed'; npx next dev --turbo"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Development utility service - Database admin
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "${PGADMIN_PORT:-5050}:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - app-network
    restart: unless-stopped

volumes:
  server_go_mod_cache:
  server_go_build_cache:
  pgadmin_data:
  client_node_modules:
  client_next_cache:
