# docker-compose.yml - Base configuration
services:
  # Database Service (Postgres)
  db:
    image: postgres:alpine
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Server Service (Go)
  server:
    image: golang:1.21-alpine
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - SERVER_PORT=${SERVER_PORT}
      - ENV=${APP_ENV}
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGIN=${CLIENT_URL:-http://localhost:3000}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  # Client Service (NextJS)
  client:
    image: node:18-alpine
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${SERVER_PORT:-8080}
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - app-network
    depends_on:
      - server

networks:
  app-network:
    name: myapp_app-network

volumes:
  postgres_data:
    driver: local
